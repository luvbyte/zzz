#! precompile=False; require=["hydra"]
scr.print_center(r"""
        __
   _.-'  '--.
  ('-._      )
   >-._.'_.-'
  /     (   
  \      >
   `-..-'   
""")

scr.print_center("[ ZHydra - Interactive Hydra Runner ]\n")


# Imports
zcli, sp = zzz.include("cli.zcli", "sp")

# Initialize CLI
zcli.init("Hydra Services", "Select Service")

# Supported services (common Hydra modules)
modules_list = [
  "ssh", "ftp", "telnet", "smtp", "smtps", "pop3", "pop3s", "imap", "imaps", "rdp",
  "mssql", "mysql", "postgres", "oracle", "mongodb", "redis", "cisco", "smb", "vnc",
  "http-get", "http-post", "https-get", "https-post", "ldap2", "ldap3-crammd5",
  "snmp", "teamspeak", "svn"
]

# ---------- INPUT HANDLER ----------
def take_inputs(service):
  scr.print_center(f"[+] Selected Service: [cyan]{service}[/]\n")

  ip = scr.input("Enter [blue]Target IP/Host[/]: ")
  user = scr.input("Enter [blue]Username[/] (or leave blank for -L file): ")
  if not user:
    user = scr.input("Enter [blue]Userlist file[/] path: ")
    user_opt = f"-L {user}"
  else:
    user_opt = f"-l {user}"

  passwd = scr.input("Enter [blue]Password[/] (or leave blank for -P file): ")
  if not passwd:
    passwd = scr.input("Enter [blue]Password list file[/] path: ")
    pass_opt = f"-P {passwd}"
  else:
    pass_opt = f"-p {passwd}"

  port = scr.input("Enter [blue]Port[/] (default depends on service, press Enter to skip): ")
  port_opt = f"-s {port}" if port else ""

  threads = scr.input("Enter [blue]Threads[/] (default 4, press Enter to skip): ")
  threads_opt = f"-t {threads}" if threads else ""

  extra = scr.input("Enter [blue]Extra Hydra options[/] (or leave blank): ")

  # Build final hydra command
  cmd = f"hydra {user_opt} {pass_opt} {port_opt} {threads_opt} {extra} {service}://{ip}"
  cmd = " ".join(cmd.split())  # clean spaces

  scr.print_center("\n[green][ Hydra Command Preview ][/]\n")
  scr.print_center(cmd + "\n")

  confirm = scr.input("Run this command? (y/n): ")
  if confirm.lower().startswith("y"):
    scr.print_center("\n[+] Starting Hydra Attack [+]\n")
    sp(cmd)
  else:
    scr.print_center("\n[!] Cancelled.\n")

  zcli.stop()

# ---------- CALLBACK ----------
def on_module_select(service, _):
  take_inputs(service)

# ---------- REGISTER MODULES ----------
for word in modules_list:
  zcli.map(word, on_module_select)

# ---------- START ----------
zcli.start()